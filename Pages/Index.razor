@page "/"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Numerics;

@inject IJSRuntime JsRuntime;

<div id="canvasHolder" style="position: fixed; background-color: magenta; width: 100%; height: 100%">
    <BECanvas Width="600" Height="900" @ref="_canvasReference"></BECanvas>
</div>

@code{
    private Models.Population population = new Models.Population();
    private List<Models.Wall> walls = new List<Models.Wall>();
    private Vector2 goal = new Vector2(250, 50);
    private Vector2 start = new Vector2(250, 800);

    private Canvas2DContext ctx;
    protected BECanvasComponent _canvasReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this.ctx = await _canvasReference.CreateCanvas2DAsync();

        this.walls.Add(new Models.Wall(100, 250, 200, 20, "#a83299"));
        this.walls.Add(new Models.Wall(200, 450, 200, 20, "#a83299"));

        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        await base.OnInitializedAsync();
    }

    private DateTime LastRender;

    [JSInvokable]
    public void ResizeInBlazor(double width, double height) => Console.WriteLine("resize");
    //field.Resize(width, height);

    [JSInvokable]
    public async ValueTask RenderInBlazor(float timeStamp)
    {
        if (population.Individuals == null)
        {
            population.Initialize(start, 500, 10);
            Console.WriteLine("created balls at start");
        }else
        {
            Console.WriteLine("number of balls:", population.Individuals.Length);
        }

        double fps = 1.0 / (DateTime.Now - LastRender).TotalSeconds;
        LastRender = DateTime.Now;

        population.StepForward(goal);

        await this.ctx.BeginBatchAsync();

        await this.ctx.ClearRectAsync(0, 0, 600, 900);
        await this.ctx.SetFillStyleAsync("#003366");
        await this.ctx.FillRectAsync(0, 0, 600, 900);

        await this.ctx.SetFontAsync("26px Segoe UI");
        await this.ctx.SetFillStyleAsync("#FFFFFF");
        await this.ctx.FillTextAsync("Genetic algorithm used for path finding", 10, 30);

        await this.ctx.SetFontAsync("16px consolas");
        await this.ctx.FillTextAsync($"FPS: {fps:0.000}", 10, 50);
        await this.ctx.FillTextAsync($"Generation: {population.Generation:0}", 10, 70);
        await this.ctx.FillTextAsync($"Best fitness: {population.BestFitness:0}", 10, 90);

        await this.ctx.SetStrokeStyleAsync("#FFFFFF");

        // kill balls if it hít any walls
        foreach (var ball in population.Individuals.Where(b => b.Alive))
        {
            foreach (var wall in this.walls)
            {
                if(IsPointInsideRectangle(ball.Pos.X, ball.Pos.Y, wall.X, wall.Y, wall.X + wall.Width, wall.Y + wall.Height))
                {
                    ball.Kill();
                }
            }
        }

        foreach (var individual in population.Individuals)
        {
            if (individual.Alive) // only show ball if it is alive
            {
                await this.ctx.BeginPathAsync();
                await this.ctx.ArcAsync(individual.Pos.X, individual.Pos.Y, individual.R, 0, 2 * Math.PI, false);
                await this.ctx.SetFillStyleAsync(individual.Color);
                await this.ctx.FillAsync();
                await this.ctx.StrokeAsync();
            }
        }

        foreach (var wall in this.walls)
        {
            await this.ctx.BeginPathAsync();
            await this.ctx.SetFillStyleAsync(wall.Color);
            await this.ctx.FillRectAsync(wall.X, wall.Y, wall.Width, wall.Height);
            await this.ctx.FillAsync();
            await this.ctx.StrokeAsync();
        }

        // draw start and goal
        // goal 
        await this.ctx.BeginPathAsync();
        await this.ctx.SetFillStyleAsync("#a83210");
        await this.ctx.ArcAsync(goal.X, goal.Y, 20, 0, 2 * Math.PI, false);
        await this.ctx.FillAsync();
        await this.ctx.StrokeAsync();
        // start 
        await this.ctx.BeginPathAsync();
        await this.ctx.SetFillStyleAsync("#E23810");
        await this.ctx.ArcAsync(start.X, start.Y, 20, 0, 2 * Math.PI, false);
        await this.ctx.FillAsync();
        await this.ctx.StrokeAsync();

        await this.ctx.EndBatchAsync();
    }

    private bool IsPointInsideRectangle(double x, double y, double x1, double y1, double x2, double y2)
    {
        // Check if x lies inside the x-coordinate range of the rectangle
        bool xInRange = x > x1 && x < x2;

        // Check if y lies inside the y-coordinate range of the rectangle
        bool yInRange = y > y1 && y < y2;

        // If both conditions are satisfied, the point is inside the rectangle
        var ShouldDie = xInRange && yInRange;

        return ShouldDie;
    }
}
