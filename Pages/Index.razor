@page "/"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Numerics;

@inject IJSRuntime JsRuntime;

<div style="color: black;">
    <label>
        Headless:
        <input type="checkbox" value="@headless" @onchange="async eventArgs => { headless = (bool) eventArgs.Value; await PaintWhite(); }" /></label>
    <label>
        Mutation rate:
        <input type="number" @bind="mutationRate" />
    </label>
    <label>
        speed:
        <input type="number" @bind="smootness" />
    </label>
    <label>
        Population size:
        <input disabled="@started" type="number" @bind="populationSize" />
    </label>
    <label>
        Genom size:
        <input disabled="@started" type="number" @bind="genomSize" />
    </label>
    <button @onclick="Start">Start</button>
</div>
<div id="canvasHolder" style="position: relative; background-color: smokeWhite; width: 800px; height: 900px; margin-left: auto; margin-right: auto; border: 5px; border-color: rgb(52, 52, 52); border-style: solid;">
    
    <BECanvas Width="800" Height="900" @ref="_canvasReference"></BECanvas>
</div>

@code{
    private Models.Population population = new Models.Population();
    private List<Models.Wall> walls = new List<Models.Wall>();
    private Vector2 goal = new Vector2(250, 80);
    private Vector2 start = new Vector2(350, 800);
    private bool headless = false;
    private double mutationRate = 0.01;
    private double smootness = 0.15;
    private bool started = false;
    private int populationSize = 30;
    private int genomSize = 130;

    private Canvas2DContext ctx;
    protected BECanvasComponent _canvasReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this.ctx = await _canvasReference.CreateCanvas2DAsync();

        this.walls.Add(new Models.Wall(-250, 250, 550, 20, "#25a16d"));
        this.walls.Add(new Models.Wall(200, 550, 300, 20, "#25a16d"));
        this.walls.Add(new Models.Wall(450, 350, 450, 20, "#25a16d"));
    }

    private async Task Start(){
        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        await base.OnInitializedAsync();
        started = true;
    }

    private DateTime LastRender;

    [JSInvokable]
    public void SetTarget(float x, float y)
    {
        goal.X = x;
        goal.Y = y;
    }

    [JSInvokable]
    public async ValueTask RenderInBlazor(float timeStamp)
    {
        if (population.Individuals == null)
        {
            population.Initialize(start, populationSize, genomSize);
            Console.WriteLine("agents created at start");
        }

        Update();
        if (!headless)
        {
            await Draw();
        }
    }
    public void Update()
    {
        population.StepForward(goal, mutationRate, headless ? 1 : (float) smootness);

        // kill balls if it hít any walls
        foreach (var agent in population.Individuals.Where(b => b.Alive))
        {
            agent.HitObstacles(walls);
            agent.LeavingSpace(800, 900);
        }
    }

    public async Task PaintWhite(){
        double fps = 0;

        await this.ctx.BeginBatchAsync();

        await this.ctx.ClearRectAsync(0, 0, 800, 900);
        await this.ctx.SetFillStyleAsync("#FFF");
        await this.ctx.FillRectAsync(0, 0, 800, 900);

        await this.ctx.SetFontAsync("26px Segoe UI");
        await this.ctx.SetFillStyleAsync("#000");
        await this.ctx.FillTextAsync($"See the console", 30, 100);

        var offset = 780;

        await this.ctx.SetFontAsync("16px consolas");
        await this.ctx.FillTextAsync($"FPS: {fps:0.000}", 10, 50 + offset);
        await this.ctx.FillTextAsync($"Generation: {population.Generation:0}", 10, 70 + offset);
        await this.ctx.FillTextAsync($"Best fitness: {population.BestEver.Fitness:0.000}", 10, 90 + offset);
        await this.ctx.FillTextAsync($"Best fitness in generation: {population.BestFitness:0.000}", 10, 110 + offset);

        await this.ctx.EndBatchAsync();
    }

    public async Task Draw()
    {
        double fps = 1.0 / (DateTime.Now - LastRender).TotalSeconds;
        LastRender = DateTime.Now;

        await this.ctx.BeginBatchAsync();

        await this.ctx.ClearRectAsync(0, 0, 800, 900);
        await this.ctx.SetFillStyleAsync("#FFF");
        await this.ctx.FillRectAsync(0, 0, 800, 900);

        await this.ctx.SetFontAsync("26px Segoe UI");
        await this.ctx.SetFillStyleAsync("#000");

        var offset = 780;

        await this.ctx.SetFontAsync("16px consolas");
        await this.ctx.FillTextAsync($"FPS: {fps:0.000}", 10, 50 + offset);
        await this.ctx.FillTextAsync($"Generation: {population.Generation:0}", 10, 70 + offset);
        await this.ctx.FillTextAsync($"Best fitness: {population.BestEver.Fitness:0.000}", 10, 90 + offset);
        await this.ctx.FillTextAsync($"Best fitness in generation: {population.BestFitness:0.000}", 10, 110 + offset);

        if (population.BestFitness > 10)
        {
            await this.ctx.FillTextAsync($"The goal have been reached!!", 10, 20);
        }

        // draw start and goal
        // goal
        await this.ctx.BeginPathAsync();
        await this.ctx.SetFillStyleAsync("#2e2e2e");
        await this.ctx.ArcAsync(goal.X, goal.Y, 20, 0, 2 * Math.PI, false);
        await this.ctx.FillAsync();
        // start
        await this.ctx.BeginPathAsync();
        await this.ctx.SetFillStyleAsync("#2e2e2e");
        await this.ctx.ArcAsync(start.X, start.Y, 20, 0, 2 * Math.PI, false);
        await this.ctx.FillAsync();


        foreach (var individual in population.Individuals)
        {
            individual.Display(ctx);
        }

        foreach (var wall in this.walls)
        {
            wall.Display(ctx);
        }

        await this.ctx.EndBatchAsync();
        }
    }
}
